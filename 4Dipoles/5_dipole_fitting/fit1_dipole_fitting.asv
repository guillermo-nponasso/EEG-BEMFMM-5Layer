%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% fit1_dipole_fitting.m                                               %%%
%%% Fit a dipole for the selected model and raw data                    %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% load Fieldtrip
restoredefaultpath;
root_dir = fullfile('../engines/fieldtrip'); % full file gives the path for any OS
io_dir = fullfile(root_dir,'fileio'); % input-output module
util_dir = fullfile(root_dir,'utilities'); % FieldTrip utilities module
plot_dir = fullfile(root_dir,'plotting'); % plotting module
forward_dir = fullfile(root_dir,'forward');
inverse_dir = fullfile(root_dir,'inverse');
addpath(root_dir);
addpath(io_dir);
addpath(util_dir);
addpath(plot_dir);
addpath(forward_dir);
addpath(inverse_dir);

%% general options
do_grid_fit = false;
grid_res = 1;  %mm

%% create orig dipole info
orig_dip = load(fullfile(raw.info.dipole_folder, ...
    strcat(patno,'_',raw.info.dipole_name,'_data.mat')));

dip0.dip.pos = 1e3*orig_dip.strdipolemcenter;
dip0.vec = orig_dip.strdipolePplus-orig_dip.strdipolePminus;
dip0.dip.mom = dip0.vec/norm(dip0.vec);

%% attempt a dipole fitting starting from the original position

disp("Dipole fit with real initial value")
cfg = [];
cfg.numdipoles = 1;
cfg.gridsearch = 'no';
cfg.headmodel = head_model;
cfg.dip.pos = dip0.dip.pos;
cfg.elec=elec;

dip = ft_dipolefitting(cfg, raw);
disp("Dipole fit completed!")

%% grid search fit
do_grid_fit=true;
if do_grid_fit
    fprintf("Computing grid dipole fit, with %dmm of resolution\n", grid_res);
    cfg=[];
    cfg.method = 'basedonresolution';
    cfg.resolution = grid_res;
    cfg.headmodel = head_model;
    cfg.unit='mm';
    
    source_model = ft_prepare_sourcemodel(cfg);
    
    cfg = [];
    cfg.numdipoles = 1;
    cfg.gridsearch = 'yes';
    cfg.sourcemodel = source_model;
    cfg.headmodel = head_model;
    cfg.elec=elec;
    cfg.dipfit.optimfun='fminunc';
    
    dip_grid = ft_dipolefitting(cfg, raw);
    disp("Grid dipole fit completed!")

end

%% print stats

dist_dip = norm(dip.dip.pos-dip0.dip.pos);
fprintf("Distance (mm) to source dipole fit: %.4f\n", norm(dip.dip.pos-dip0.dip.pos));
cos_angle_dip = dot((dip.dip.mom(:,1)/norm(dip.dip.mom(:,1))),dip0.dip.mom);
fprintf("degrees of angle to source dipole fit: %.2f\n", rad2deg(acos(cos_angle_dip)));


if do_grid_fit
    dist_grid = norm(dip_grid.dip.pos-dip0.dip.pos);
    fprintf("Distance (mm) to grid dipole fit: %.4f\n", norm(dip_grid.dip.pos-dip0.dip.pos));
    cos_angle_grid = dot((dip_grid.dip.mom(:,1)/norm(dip_grid.dip.mom(:,1))),dip0.dip.mom);
    fprintf("degrees of angle to grid dipole fit: %.2f\n", rad2deg(acos(cos_angle_grid)));

    if(dist_grid<dist_dip)
        dip=dip_grid;
    end
end

variable_names = {'Patient','Model','Dist_mm','Angle_deg','Residual_Variance'};
data_cell = cell(1,6);
data_cell(1,1:end)=

if do_grid_fit
    save(fullfile(patient_path,'dipoles',dipole_name,strcat(patno,'_',model_name,'_',dipole_name,'_fitting.mat')), ...
        'dip0','dip','dip_grid','do_grid_fit');
else
    save(fullfile(patient_path,'dipoles',dipole_name,strcat(patno,'_',model_name,'_',dipole_name,'_fitting.mat')), ...
        'dip0','dip','do_grid_fit');
end